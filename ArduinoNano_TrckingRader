//23 NANO Radar
#include <Servo.h> 
#include <SPI.h>
#include "Ucglib.h"           
#define  trigPin   5
#define  echoPin   4
#define  ServoPin  3
int Ymax = 128;
int Xmax = 160;
int Xcent = Xmax / 2;
int base = 118;
int scanline = 100;
int Hosei =8;
//--------------------
int DegMin=10;
int DegMax=170;
int TargetDeg=DegMin;
int TargetDistance=100;
//--------------------
Servo baseServo; 
Ucglib_ST7735_18x128x160_HWSPI ucg(/*cd=*/ 9, /*cs=*/ 10, /*reset=*/ 8);

void setup(void)
{
      ucg.begin(UCG_FONT_MODE_SOLID);
      ucg.setRotate90();
      pinMode(trigPin, OUTPUT);
      pinMode(echoPin, INPUT);
      Serial.begin(115200);
      baseServo.attach(ServoPin); 
      //起動画面　描画
      ucg.setFontMode(UCG_FONT_MODE_TRANSPARENT);
      ucg.setColor(255, 255, 0);
      ucg.setColor(1, 0, 100, 0);
      ucg.drawGradientBox(0, 0, 160, 128);
      ucg.setPrintDir(0);
      ucg.setColor(0, 5, 0);
      ucg.setPrintPos(25,42);
      ucg.setFont(ucg_font_logisoso18_tf);  
      ucg.setColor(255, 0, 255);
      ucg.setPrintPos(25,40);
      ucg.print("Sonic Radar");
      //サーボモータ起動　半回転
      for(int x=0;x<180;x+=5)
          { baseServo.write(x-Hosei);
            delay(50);
           } 
      delay(300);
      cls();  //画面初期化   
      delay(300);
      ucg.setFontMode(UCG_FONT_MODE_SOLID);
      ucg.setFont(ucg_font_orgv01_hr);
}
//レーダ画面　初期化
void cls()
{
  ucg.setColor(0, 0, 0, 0);
  for(int s=0;s<128;s++)
  {
    ucg.drawHLine(0,s,160);
    delay(4);
  }
}
//距離計算
int calculateDistance()
{ 
      long duration;
      digitalWrite(trigPin, LOW); 
      delayMicroseconds(2);
      digitalWrite(trigPin, HIGH); 
      delayMicroseconds(10);
      digitalWrite(trigPin, LOW);
      duration = pulseIn(echoPin, HIGH);
      return duration*0.034/2;
}
//レーダ画面　距離表示
void fix_font() 
{
      ucg.setColor(255, 180, 255);
      //ucg.setPrintPos(70,14);
      //ucg.print("1.00M");
      ucg.setPrintPos(70,52);
      ucg.print("0.50M");
      ucg.setPrintPos(70,90);
      ucg.print("0.25M");     
}
//レーダ画面　サークル表示
void fix()
{ 
      ucg.setColor(0, 40, 0);
      ucg.drawDisc(Xcent, base+1, 3, UCG_DRAW_ALL); 
      ucg.drawCircle(Xcent, base+1, 115, UCG_DRAW_UPPER_LEFT);
      ucg.drawCircle(Xcent, base+1, 115, UCG_DRAW_UPPER_RIGHT);
      ucg.drawCircle(Xcent, base+1, 78, UCG_DRAW_UPPER_LEFT);
      ucg.drawCircle(Xcent, base+1, 78, UCG_DRAW_UPPER_RIGHT);
      ucg.drawCircle(Xcent, base+1, 40, UCG_DRAW_UPPER_LEFT);
      ucg.drawCircle(Xcent, base+1, 40, UCG_DRAW_UPPER_RIGHT);
      ucg.drawLine(0, base+1, Xmax,base+1);
      ucg.setColor(0, 120, 0);
      
       for(int i= 40;i < 140; i+=2)
       {
        if (i % 10 == 0) 
          ucg.drawLine(105*cos(radians(i))+Xcent,base - 105*sin(radians(i)) , 113*cos(radians(i))+Xcent,base - 113*sin(radians(i)));
        else
         ucg.drawLine(110*cos(radians(i))+Xcent,base - 110*sin(radians(i)) , 113*cos(radians(i))+Xcent,base - 113*sin(radians(i)));
       }
      ucg.setColor(255, 180, 255);
      ucg.setPrintPos(70,14);
      ucg.print("1.00M");
}
//レーダ画面　目標表示
int DrawLine(int x,int shadowLine)
{
  int distance;
  baseServo.write(x-Hosei); 
  
  ucg.setColor(0, 255, 0);
  ucg.drawLine(Xcent, base, scanline*cos(radians(x))+Xcent,base - scanline*sin(radians(x)));

  ucg.setColor(0, 12, 0);
  ucg.drawLine(Xcent, base, scanline*cos(radians(x+shadowLine))+Xcent,base - scanline*sin(radians(x+shadowLine)));
      
  ucg.setColor(0,200, 0);
  distance = calculateDistance();
  if (distance < 100)
    {
      ucg.setColor(255,0,255);
      ucg.drawDisc(distance*cos(radians(x))+Xcent,-distance*sin(radians(x))+base, 1, UCG_DRAW_ALL);
    }else{ 
      ucg.setColor(255,255,255);
      ucg.drawDisc(116*cos(radians(x))+Xcent,-116*sin(radians(x))+base, 1, UCG_DRAW_ALL);
    }
  Serial.print(x); 
  Serial.print("    ,   ");
  Serial.println(distance); 
  if (x > 70 and x < 110)  fix_font();//文字が消えるので再描画
  //方位及び探知距離を表示
  
  ucg.setColor(255,255,255);
  ucg.setPrintPos(0,126);
  ucg.print("DEG: "); 
  ucg.setPrintPos(24,126);
  ucg.print(x);
  ucg.print("  ");
  ucg.setPrintPos(125,126);
  ucg.print("  ");
  ucg.print(distance);
  ucg.print("cm  ");
  //----------------------------------------
  if (distance>5 && distance<=TargetDistance)
  {
    TargetDistance=distance;
    TargetDeg=x;

  }
  //----------------------------------------



}

void loop(void)
{
  fix(); 
  fix_font();      
  for (int x=DegMax; x > DegMin; x-=2){
    DrawLine(x,2);        
  }
  DegMax=TargetDeg+10;
  DegMin=TargetDeg-10;
  if(DegMax>170)
    {
      DegMax=170;
      DegMin=150;
    }
  if(DegMin<20)
    {
      DegMax=30;
      DegMin=10;
    }
  TargetDistance=100;
  delay(500);//50
  cls(); 
  fix(); 
  fix_font();
  for (int  x=DegMin; x < DegMax; x+=2){
    DrawLine(x,-2);
  }
  DegMax=TargetDeg+10;
  DegMin=TargetDeg-10;
  if(DegMax>170)
    {
      DegMax=170;
      DegMin=150;
    }
  if(DegMin<20)
    {
      DegMax=30;
      DegMin=10;
    }

  TargetDistance=100;
  delay(500);//50
  cls();
}
